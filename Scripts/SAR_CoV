""Project-RS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZlZA2BmPIw9y4smYhi_e_QRoTeDLadPW
"""

#### SARS-Sample, your pipeline should be able to process any of these two samples.

!gdown 1J6nku7fSKE5t9yGgw0m1sUGy6regdmeb
!gdown 1e05YYPAHcKEjNYgwMntknvKY-Je-W2bh

### This reads have small error it is bypassable but we never covered it in class, so please use the link immediately below, it is the same dataset but with matching names.
###!gdown 1-0rxMU6PP8LFpoBnqz_S7NJqERRUl2TF
###!gdown 1-2U6UE5NmR9sRc_Rn_B3SHiZV7uqd00b

### This is the same data a above, but names were corrected
!gdown 1fI7ewh0COZ4ODyUjx5xz_sgToBQSpb7W
!gdown 1FyLU_Eehf9R3z2SiVp-Gu5BQNoWMuB7M


############### BACK UPS ###########
####### IF YOU EXPERIENCE THE ERROR "TOO MANY PEOPLE DOWNLOADING THIS FILE, USE THE LINKS BELOW AS BACK UP"
!gdown 1-2h_NXGEvUIcSgtQnpeRy3BN8QKmbARf
!gdown 1-1zFQh9lo7O1Fe6dR6abgwqBZlu4TBB-

!gdown 1-3y7YBrnJmpwdxTqimDGewWpTIkzlWei
!gdown 1-2jBX4sV28m7FoauSMH2Tik65h4m72ig

!apt install bwa
!apt install samtools
!apt install bcftools

##download sample 1 genome

!gdown 1fI7ewh0COZ4ODyUjx5xz_sgToBQSpb7W
!gdown 1FyLU_Eehf9R3z2SiVp-Gu5BQNoWMuB7M

#download sample 2 genome
!gdown 1-2h_NXGEvUIcSgtQnpeRy3BN8QKmbARf
!gdown 1-1zFQh9lo7O1Fe6dR6abgwqBZlu4TBB-

## download wuhan reference genome

!gdown 1yTOH-9w0RbcBhwetNWzYxFXENtiyPlzW

# Burrows-Wheeler Aligner tool for aligning sequencing reads to a reference genome.
#It prepares the reference genome for efficient alignment by building auxiliary data structures.
!bwa index -p Wuhan WuhanRef.fasta

# converts file from fastq format to sam format
!bwa mem Wuhan SARS.R1.fastq SARS.R2.fastq > SARS1.sam
!bwa mem Wuhan SARS_EDT.R1.fastq SARS_EDT.R2.fastq > SARS2.sam

#Convert sam file to bam files for software to read
!samtools view -bS -q 12 SARS1.sam | samtools sort -o SARS1.sam.sorted
!samtools view -bS -q 12 SARS2.sam | samtools sort -o SARS2.sam.sorted

#Sorts the variants from our samples using the reference genome
!bcftools mpileup -f WuhanRef.fasta --max-depth  2000 SARS1.sam.sorted  | bcftools call --multiallelic-caller --variants-only --ploidy 1  -mv -Oz -o SARS1.Variants.vcf.gz
!bcftools mpileup -f WuhanRef.fasta --max-depth  2000 SARS2.sam.sorted  | bcftools call --multiallelic-caller --variants-only --ploidy 1  -mv -Oz -o SARS2.Variants.vcf.gz

# The VCF file is compressed therefore this code will be decompressed or opened up for access
!gzip -df SARS1.Variants.vcf.gz
!gzip -df SARS2.Variants.vcf.gz

##Links sequences together to form a new sequence
!cat SARS1.Variants.vcf
!cat SARS2.Variants.vcf

!pip install cyvcf2
vcf_path1 = 'SARS1.Variants.vcf'

## Able to read VCF file that containts the genetic variations
import cyvcf2

# Create a VCF reader object
vcf_reader1 = cyvcf2.VCF(vcf_path1)

with open('output1.tsv', 'w') as file:
# Loop through each variant in the VCF file
    for variant in vcf_reader1:
    # Access various properties of the variant
    ### Se note below
        genotype = variant.gt_types[0]
        data_string = f"{variant.CHROM}\t{variant.POS}\t{variant.ID}\t{variant.REF}\t{','.join(variant.ALT)}\t{variant.QUAL}\t{variant.FILTER}\t{genotype}\n"
        # Write the data string to the file
        file.write(data_string)

import cyvcf2

# Create a VCF reader object
vcf_path2 = 'SARS2.Variants.vcf'
vcf_reader2 = cyvcf2.VCF(vcf_path2)

with open('output2.tsv', 'w') as file:
# Loop through each variant in the VCF file
    for variant in vcf_reader2:
    # Access various properties of the variant
    ### See note below
        genotype = variant.gt_types[0]
        data_string = f"{variant.CHROM}\t{variant.POS}\t{variant.ID}\t{variant.REF}\t{','.join(variant.ALT)}\t{variant.QUAL}\t{variant.FILTER}\t{genotype}\n"
        # Write the data string to the file
        file.write(data_string)

## pandas is a library that is used for data manipulation and anlaysis
import pandas
columns = ['CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'GENOTYPE']
df_1 = pandas.read_csv("output1.tsv", delimiter = "\t", header=None, names=columns)
df_1

import pandas
columns = ['CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'GENOTYPE']
df_2 = pandas.read_csv("output2.tsv", delimiter = "\t", header=None, names=columns)
df_2

## Transitions for df_1
Transitions1_CT = df_1[(df_1['REF'] == 'C') & (df_1['ALT'] == 'T') | (df_1['REF'] == 'T') & (df_1['ALT'] == 'C')]
Transitions1_GA = df_1[(df_1['REF'] == 'G') & (df_1['ALT'] == 'A') | (df_1['REF'] == 'A') & (df_1['ALT'] == 'G')]
Transitions1_CT

Transitions1_GA

## Tranvsversion for df_1
Transversions1_CG = df_1[(df_1['REF'] == 'C') & (df_1['ALT'] == 'G') | (df_1['REF'] == 'G') & (df_1['ALT'] == 'C')]
Transversions1_AT = df_1[(df_1['REF'] == 'T') & (df_1['ALT'] == 'A') | (df_1['REF'] == 'A') & (df_1['ALT'] == 'T')]
Transversions1_CA = df_1[(df_1['REF'] == 'C') & (df_1['ALT'] == 'A') | (df_1['REF'] == 'A') & (df_1['ALT'] == 'C')]
Transversions1_GT = df_1[(df_1['REF'] == 'T') & (df_1['ALT'] == 'G') | (df_1['REF'] == 'G') & (df_1['ALT'] == 'T')]
Transversions1_CG

Transversions1_AT

Transversions1_CA

Transversions1_GT

## Transitions for df_2
Transitions2_CT = df_2[(df_2['REF'] == 'C') & (df_2['ALT'] == 'T') | (df_2['REF'] == 'T') & (df_2['ALT'] == 'C')]
Transitions2_GA = df_2[(df_2['REF'] == 'G') & (df_2['ALT'] == 'A') | (df_2['REF'] == 'A') & (df_2['ALT'] == 'G')]
Transitions2_CT

Transitions2_GA

## Transversions for df_2
Transversions2_CG = df_2[(df_2['REF'] == 'C') & (df_2['ALT'] == 'G') | (df_2['REF'] == 'G') & (df_2['ALT'] == 'C')]
Transversions2_AT = df_2[(df_2['REF'] == 'T') & (df_2['ALT'] == 'A') | (df_2['REF'] == 'A') & (df_2['ALT'] == 'T')]
Transversions2_CA = df_2[(df_2['REF'] == 'C') & (df_2['ALT'] == 'A') | (df_2['REF'] == 'A') & (df_2['ALT'] == 'C')]
Transversions2_GT = df_2[(df_2['REF'] == 'T') & (df_2['ALT'] == 'G') | (df_2['REF'] == 'G') & (df_2['ALT'] == 'T')]
Transversions2_CG

Transversions2_AT

Transversions2_CA

Transversions2_GT

## Program to make charts and graphs to visualize data in dataframe
import matplotlib.pyplot as plt

##Setting colors for the chart
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']  # Customize as needed

#Create the pie chart
plt.pie(df_1['REF'].value_counts(),
        labels=df_1['REF'].value_counts().index,
        colors=colors,
        autopct='%1.1f%%',  # Display percentage on the chart
        startangle=90,      # Start angle for the first slice
        wedgeprops={'edgecolor': 'black'})  # Add black edges for better visibility

#Add a title
plt.title("Distribution of REFERENCES in SARS-1 Data")

#Add a legend
plt.legend(df_1['REF'].value_counts().index, title="REF Categories", loc="upper left")

#Display the chart
plt.show()

##Setting colors for the chart
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']  # Customize as needed

#Create the pie chart
plt.pie(df_1['ALT'].value_counts(),
        labels=df_1['ALT'].value_counts().index,
        colors=colors,
        autopct='%1.1f%%',  # Display percentage on the chart
        startangle=90,      # Start angle for the first slice
        wedgeprops={'edgecolor': 'black'})  # Add black edges for better visibility

#Add a title
plt.title("Distribution of ALTERNATIVES in SARS-1 Data")

#Add a legend
plt.legend(df_1['REF'].value_counts().index, title="REF Categories", loc="upper left")

#Display the chart
plt.show()

##Setting colors for the chart
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']  # Customize as needed

#Create the pie chart
plt.pie(df_2['REF'].value_counts(),
        labels=df_2['REF'].value_counts().index,
        colors=colors,
        autopct='%1.1f%%',  # Display percentage on the chart
        startangle=90,      # Start angle for the first slice
        wedgeprops={'edgecolor': 'black'})  # Add black edges for better visibility

#Add a title
plt.title("Distribution of REFERENCES in SARS-2 Data")

#Add a legend
plt.legend(df_2['REF'].value_counts().index, title="REF Categories", loc="upper left")

#Display the chart
plt.show()

##Setting colors for the chart
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']  # Customize as needed

#Create the pie chart
plt.pie(df_2['ALT'].value_counts(),
        labels=df_2['ALT'].value_counts().index,
        colors=colors,
        autopct='%1.1f%%',  # Display percentage on the chart
        startangle=90,      # Start angle for the first slice
        wedgeprops={'edgecolor': 'black'})  # Add black edges for better visibility

#Add a title
plt.title("Distribution of ALTERNATIVES in SARS-2 Data")

#Add a legend
plt.legend(df_2['ALT'].value_counts().index, title="REF Categories", loc="upper left")

#Display the chart
plt.show()

import pandas as pd
##Merge the two dataframes on the 'Position' column to compare mutations at the same positions
merged_df = pd.merge(df_1, df_2, on= 'POS', suffixes=('_1', '_2'))

##Find positions where mutations are the same in both datasets
same_mutations = merged_df[merged_df['REF_1'] == merged_df['REF_2']]
same_mutations = same_mutations[same_mutations['ALT_1'] == same_mutations['ALT_2']]

##Output results
print("Same Mutations:")
print(same_mutations[['POS', 'REF_1', 'ALT_1', 'REF_2', 'ALT_2']])
